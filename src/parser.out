Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> cnstrnts
Rule 1     cnstrnts -> cnstrnts DELIM def
Rule 2     cnstrnts -> def
Rule 3     def -> NAME - NAME ARROW NAME
Rule 4     def -> NAME - NAME ARROW NAME - NAME
Rule 5     def -> NAME , NAME ANTI NAME , NAME
Rule 6     def -> NAME # NAME

Terminals, with rules where they appear

#                    : 6
,                    : 5 5
-                    : 3 4 4
ANTI                 : 5
ARROW                : 3 4
DELIM                : 1
NAME                 : 3 3 3 4 4 4 4 5 5 5 5 6 6
error                : 

Nonterminals, with rules where they appear

cnstrnts             : 1 0
def                  : 1 2

Parsing method: LALR

state 0

    (0) S' -> . cnstrnts
    (1) cnstrnts -> . cnstrnts DELIM def
    (2) cnstrnts -> . def
    (3) def -> . NAME - NAME ARROW NAME
    (4) def -> . NAME - NAME ARROW NAME - NAME
    (5) def -> . NAME , NAME ANTI NAME , NAME
    (6) def -> . NAME # NAME

    NAME            shift and go to state 2

    cnstrnts                       shift and go to state 1
    def                            shift and go to state 3

state 1

    (0) S' -> cnstrnts .
    (1) cnstrnts -> cnstrnts . DELIM def

    DELIM           shift and go to state 4


state 2

    (3) def -> NAME . - NAME ARROW NAME
    (4) def -> NAME . - NAME ARROW NAME - NAME
    (5) def -> NAME . , NAME ANTI NAME , NAME
    (6) def -> NAME . # NAME

    -               shift and go to state 6
    ,               shift and go to state 7
    #               shift and go to state 5


state 3

    (2) cnstrnts -> def .

    DELIM           reduce using rule 2 (cnstrnts -> def .)
    $end            reduce using rule 2 (cnstrnts -> def .)


state 4

    (1) cnstrnts -> cnstrnts DELIM . def
    (3) def -> . NAME - NAME ARROW NAME
    (4) def -> . NAME - NAME ARROW NAME - NAME
    (5) def -> . NAME , NAME ANTI NAME , NAME
    (6) def -> . NAME # NAME

    NAME            shift and go to state 2

    def                            shift and go to state 8

state 5

    (6) def -> NAME # . NAME

    NAME            shift and go to state 9


state 6

    (3) def -> NAME - . NAME ARROW NAME
    (4) def -> NAME - . NAME ARROW NAME - NAME

    NAME            shift and go to state 10


state 7

    (5) def -> NAME , . NAME ANTI NAME , NAME

    NAME            shift and go to state 11


state 8

    (1) cnstrnts -> cnstrnts DELIM def .

    DELIM           reduce using rule 1 (cnstrnts -> cnstrnts DELIM def .)
    $end            reduce using rule 1 (cnstrnts -> cnstrnts DELIM def .)


state 9

    (6) def -> NAME # NAME .

    DELIM           reduce using rule 6 (def -> NAME # NAME .)
    $end            reduce using rule 6 (def -> NAME # NAME .)


state 10

    (3) def -> NAME - NAME . ARROW NAME
    (4) def -> NAME - NAME . ARROW NAME - NAME

    ARROW           shift and go to state 12


state 11

    (5) def -> NAME , NAME . ANTI NAME , NAME

    ANTI            shift and go to state 13


state 12

    (3) def -> NAME - NAME ARROW . NAME
    (4) def -> NAME - NAME ARROW . NAME - NAME

    NAME            shift and go to state 14


state 13

    (5) def -> NAME , NAME ANTI . NAME , NAME

    NAME            shift and go to state 15


state 14

    (3) def -> NAME - NAME ARROW NAME .
    (4) def -> NAME - NAME ARROW NAME . - NAME

    DELIM           reduce using rule 3 (def -> NAME - NAME ARROW NAME .)
    $end            reduce using rule 3 (def -> NAME - NAME ARROW NAME .)
    -               shift and go to state 16


state 15

    (5) def -> NAME , NAME ANTI NAME . , NAME

    ,               shift and go to state 17


state 16

    (4) def -> NAME - NAME ARROW NAME - . NAME

    NAME            shift and go to state 18


state 17

    (5) def -> NAME , NAME ANTI NAME , . NAME

    NAME            shift and go to state 19


state 18

    (4) def -> NAME - NAME ARROW NAME - NAME .

    DELIM           reduce using rule 4 (def -> NAME - NAME ARROW NAME - NAME .)
    $end            reduce using rule 4 (def -> NAME - NAME ARROW NAME - NAME .)


state 19

    (5) def -> NAME , NAME ANTI NAME , NAME .

    DELIM           reduce using rule 5 (def -> NAME , NAME ANTI NAME , NAME .)
    $end            reduce using rule 5 (def -> NAME , NAME ANTI NAME , NAME .)

