Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> slist
Rule 1     slist -> statement
Rule 2     slist -> slist statement
Rule 3     statement -> LPAREN plist RPAREN IN NAME INVSTMT
Rule 4     statement -> NAME MINUS NAME ARROW NAME INVSTMT
Rule 5     plist -> plist COMMA NAME
Rule 6     plist -> NAME

Terminals, with rules where they appear

ARROW                : 4
COMMA                : 5
IN                   : 3
INVSTMT              : 3 4
LPAREN               : 3
MINUS                : 4
NAME                 : 3 4 4 4 5 6
RPAREN               : 3
error                : 

Nonterminals, with rules where they appear

plist                : 3 5
slist                : 2 0
statement            : 1 2

Parsing method: LALR

state 0

    (0) S' -> . slist
    (1) slist -> . statement
    (2) slist -> . slist statement
    (3) statement -> . LPAREN plist RPAREN IN NAME INVSTMT
    (4) statement -> . NAME MINUS NAME ARROW NAME INVSTMT

    LPAREN          shift and go to state 3
    NAME            shift and go to state 4

    slist                          shift and go to state 1
    statement                      shift and go to state 2

state 1

    (0) S' -> slist .
    (2) slist -> slist . statement
    (3) statement -> . LPAREN plist RPAREN IN NAME INVSTMT
    (4) statement -> . NAME MINUS NAME ARROW NAME INVSTMT

    LPAREN          shift and go to state 3
    NAME            shift and go to state 4

    statement                      shift and go to state 5

state 2

    (1) slist -> statement .

    LPAREN          reduce using rule 1 (slist -> statement .)
    NAME            reduce using rule 1 (slist -> statement .)
    $end            reduce using rule 1 (slist -> statement .)


state 3

    (3) statement -> LPAREN . plist RPAREN IN NAME INVSTMT
    (5) plist -> . plist COMMA NAME
    (6) plist -> . NAME

    NAME            shift and go to state 6

    plist                          shift and go to state 7

state 4

    (4) statement -> NAME . MINUS NAME ARROW NAME INVSTMT

    MINUS           shift and go to state 8


state 5

    (2) slist -> slist statement .

    LPAREN          reduce using rule 2 (slist -> slist statement .)
    NAME            reduce using rule 2 (slist -> slist statement .)
    $end            reduce using rule 2 (slist -> slist statement .)


state 6

    (6) plist -> NAME .

    RPAREN          reduce using rule 6 (plist -> NAME .)
    COMMA           reduce using rule 6 (plist -> NAME .)


state 7

    (3) statement -> LPAREN plist . RPAREN IN NAME INVSTMT
    (5) plist -> plist . COMMA NAME

    RPAREN          shift and go to state 9
    COMMA           shift and go to state 10


state 8

    (4) statement -> NAME MINUS . NAME ARROW NAME INVSTMT

    NAME            shift and go to state 11


state 9

    (3) statement -> LPAREN plist RPAREN . IN NAME INVSTMT

    IN              shift and go to state 12


state 10

    (5) plist -> plist COMMA . NAME

    NAME            shift and go to state 13


state 11

    (4) statement -> NAME MINUS NAME . ARROW NAME INVSTMT

    ARROW           shift and go to state 14


state 12

    (3) statement -> LPAREN plist RPAREN IN . NAME INVSTMT

    NAME            shift and go to state 15


state 13

    (5) plist -> plist COMMA NAME .

    RPAREN          reduce using rule 5 (plist -> plist COMMA NAME .)
    COMMA           reduce using rule 5 (plist -> plist COMMA NAME .)


state 14

    (4) statement -> NAME MINUS NAME ARROW . NAME INVSTMT

    NAME            shift and go to state 16


state 15

    (3) statement -> LPAREN plist RPAREN IN NAME . INVSTMT

    INVSTMT         shift and go to state 17


state 16

    (4) statement -> NAME MINUS NAME ARROW NAME . INVSTMT

    INVSTMT         shift and go to state 18


state 17

    (3) statement -> LPAREN plist RPAREN IN NAME INVSTMT .

    LPAREN          reduce using rule 3 (statement -> LPAREN plist RPAREN IN NAME INVSTMT .)
    NAME            reduce using rule 3 (statement -> LPAREN plist RPAREN IN NAME INVSTMT .)
    $end            reduce using rule 3 (statement -> LPAREN plist RPAREN IN NAME INVSTMT .)


state 18

    (4) statement -> NAME MINUS NAME ARROW NAME INVSTMT .

    LPAREN          reduce using rule 4 (statement -> NAME MINUS NAME ARROW NAME INVSTMT .)
    NAME            reduce using rule 4 (statement -> NAME MINUS NAME ARROW NAME INVSTMT .)
    $end            reduce using rule 4 (statement -> NAME MINUS NAME ARROW NAME INVSTMT .)

