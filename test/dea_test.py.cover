0 """
0 Test cases for *dea* module.
+ """
0 
+ __author__ = 'weigla'
+ __date__ = '2012-06-04'
0 
+ import sys, os, unittest
+ from  unittest import TestCase
0 
0 
+ sys.path.insert(0, os.path.abspath('../src/'))
0 
+ import dea
+ from dea import *
0 
0 
+ class TestDEA(TestCase):
0 
+     def setUp(self):
+         self.dea1 = DEA("dea_test1.xml")
+         self.dea1_2 = DEA("dea_test1_2.xml")
+         self.dea1_3 = DEA("dea_test1_3.xml")
0 
+         self.dea2 = DEA("dea_test2.xml")
+         self.dea2_2 = DEA("dea_test2_2.xml")
+         self.dea2_3 = DEA("dea_test2_3.xml")
0 
+         self.deaBig = DEA("dea_python.xml")
0 
0 
+         Q = { (x,y) for x in range(0,3) for y in range(0,3) }
+         A = self.dea1.A
0 
+         d  = {}
+         a,b="a","b"
+         d[(0,0), a] = (2,2)
+         d[(0,0), b] = (1,1)
+         d[(0,1), a] = (2,2)
+         d[(0,1), b] = (1,0)
+         d[(0,2), a] = (2,0)
+         d[(0,2), b] = (1,1)
0 
+         d[(1,0), a] = (2,2)
+         d[(1,0), b] = (0,1)
+         d[(1,1), a] = (2,2)
+         d[(1,1), b] = (0,0)
+         d[(1,2), a] = (2,0)
+         d[(1,2), b] = (0,1)
0 
+         d[(2,0), a] = (0,2)
+         d[(2,0), b] = (1,1)
+         d[(2,1), a] = (0,2)
+         d[(2,1), b] = (1,0)
+         d[(2,2), a] = (0,0)
+         d[(2,2), b] = (1,1)
0 
+         s = (0,0)
+         F = set()
0 
+         self.dea1P = DEA([Q,A,d,s,F])
0 
0 
+     def test_init(self):
0         #test tuple assignment
+         Q,A,d,s,F = self.dea1
0 
0         #test __str__
+         self.assertTrue(type(str(self.dea1)) is str)
0 
0         #test __repr__
+         self.assertTrue(type(repr(self.dea1)) is str)
+         self.assertEqual(self.dea1, eval(repr(self.dea1)))
0 
+     def test_call2(self):
0         #test normal behaviour
+         self.assertTrue( self.deaBig(self.deaBig.s, "finally") \
+                         == self.deaBig("finally") )
+         self.assertTrue(self.deaBig("if|if") in self.deaBig.F)
0 
+         self.assertTrue( self.deaBig("while") == self.deaBig(
+                 self.deaBig(
+                     self.deaBig(
+                         self.deaBig(
+                             self.deaBig("w"), "h"),"i"),"l"),"e"))
0 
+         self.assertTrue(self.deaBig( ["w", "h","i", "l", "e"]) == \
+                         self.deaBig("while"))
0 
0         #test tuple behaviour
+         a,b = self.deaBig(  (self.deaBig.s,self.deaBig.s) , "if|if")
+         c   = self.deaBig("if|if")
+         self.assertEqual((c,c),(a,b))
+         self.assertTrue(a in self.deaBig.F)
0 
0         #get an exception
+         with self.assertRaises(Exception):
+             a,b = self.deaBig(  (10000,120202) , "def")
0 
0         #should not end up in an exception
+         self.deaBig(  ('a','b') , "def", False)
0 
0 
+     def test_productautomata(self):
0         """
0         test A**x
0         """
0 
+         A_x = self.dea1 ** 3
0 
0         #invariant for each state (tuple and len of 3)
+         stateInv = lambda q: type(q) is tuple and len(q) == 3
0 
0         #each state satisfies stateInv
+         self.assertTrue( all( map( stateInv , A_x.Q)))
+         self.assertTrue(type(A_x.Q) is set)
0 
0         #alphabet stays the same
+         self.assertTrue(A_x.A == self.dea1.A)
0 
0         #delta is totally defined for Q and A
+         self.assertEqual( A_x.Q , {q for q,a in  A_x.d.keys()} )
0 
+         self.assertTrue( A_x.Q >= {q for q   in  A_x.d.values()} )
+         self.assertEqual( A_x.A , {a for q,a in  A_x.d.keys()})
+         self.assertEqual( len(A_x.Q) * len(A_x.A) , len(A_x.d) )
0 
+         self.assertTrue( stateInv(A_x.s) )
0 
+         self.assertEqual(self.dea1P, self.dea1**2)
0 
+         self.assertNotEqual(self.dea1, [])
0 
0        # self.assertEqual(self.dea1**2, self.dea1_2);
0        # self.assertEqual(self.dea1**3, self.dea1_3);
0 
0 
+     def test_eq(self):
0         """
0         test: A == B
0         """
+         Q,A,d,s,F = self.dea1
0 
+         self.assertTrue(self.dea1 == self.dea1)
+         self.assertTrue(self.dea1 == [Q, A, d, s, F])
+         self.assertTrue(self.dea1 == (Q, A, d, s, F))
+         self.assertTrue(self.dea1 == DEA("dea_test1.xml"))
0 
+         self.assertTrue([Q, A, d, s, F] == self.dea1)
+         self.assertTrue((Q, A, d, s, F) == self.dea1)
+         self.assertTrue(DEA("dea_test1.xml")  == self.dea1)
0 
+         self.assertFalse(self.dea1 == [set(), A, d, s, F])
+         self.assertFalse(self.dea1 == [Q, set() ,d ,s, F])
+         self.assertFalse(self.dea1 == [Q, A, dict(), s, F])
+         self.assertFalse(self.dea1 == [Q, A, d, None, F])
+         self.assertFalse(self.dea1 == [Q, A, d, s, set()])
0 
0 
+     def test_search(self):
+         L = list(self.dea2.search(self.dea2.s, True))
+         self.assertEqual([(1, ''), (0, 'a'), (2, 'b'), (4, 'ab'), (1, 'aba'), (3, 'abb')], L)
0 
+         L = list(self.dea1.search(self.dea1.s, True))
+         self.assertEqual([(0, ''), (2, 'a'), (1, 'b'), (0, 'bb')], L)
0 
+         L = list(self.deaBig.search(self.deaBig.s, True))
+         self.assertEqual([(49, ''), (25, 'a'), (17, 'c'), (26, 'b'), (5, 'e'), (24, 'd'), (7, 'g'), (18, 'f'), (22, 'i'), (62, 'h'), (21, 'l'), (27, 'o'), (20, 'n'), (19, 'p'), (9, 'r'), (10, 't'), (6, 'w'), (8, 'y'), (60, 'yi'), (15, 'yie'), (3, 'yiel'), (34, 'yield'), (49, 'yield|'), (50, 'wh'), (36, 'whi'), (71, 'whil'), (32, 'tr'), (51, 'ra'), (48, 're'), (35, 'ret'), (2, 'retu'), (39, 'retur'), (37, 'rai'), (28, 'pa'), (64, 'pr'), (44, 'pri'), (0, 'prin'), (1, 'pas'), (63, 'la'), (47, 'lam'), (67, 'lamb'), (69, 'lambd'), (68, 'im'), (46, 'imp'), (56, 'impo'), (55, 'fi'), (57, 'fr'), (31, 'fro'), (30, 'fin'), (23, 'fina'), (43, 'final'), (61, 'gl'), (16, 'glo'), (4, 'glob'), (38, 'globa'), (52, 'de'), (59, 'el'), (58, 'ex'), (14, 'exc'), (13, 'exe'), (70, 'exce'), (11, 'eli'), (66, 'br'), (41, 'bre'), (45, 'brea'), (53, 'cl'), (54, 'co'), (29, 'con'), (12, 'cont'), (42, 'conti'), (33, 'contin'), (65, 'as'), (40, 'ass')]
+                          , L)
0 
+     def test_reachable(self):
+         self.assertEquals(self.dea1.reachable(0,1),"b")
+         self.assertTrue(self.dea1.reachable(0,0) in ("aa","bb"))
+         self.assertEquals(self.dea1.reachable(0,2),"a")
0 
+         self.assertEqual(self.dea2.reachable(1,2), "b")
+         self.assertEqual(self.dea2.reachable(1,0), "a")
+         self.assertEqual(self.dea2.reachable(0,1), "ba")
+         self.assertEqual(self.dea2.reachable(0,0), "bba")
+         self.assertEqual(self.dea2.reachable(0,4), "b")
+         self.assertEqual(self.dea2.reachable(4,2), "bb")
0 
+         self.assertEqual(self.dea2.reachable(2,1), False)
+         self.assertEqual(self.dea2.reachable(2,0), False)
+         self.assertEqual(self.dea2.reachable(2,3), False)
+         self.assertEqual(self.dea2.reachable(2,4), False)
+         self.assertEqual(self.dea2.reachable(2,5), False)
0 
+         self.assertTrue(self.dea2.reachable(2,2) in ( "b","a"))
0 
0 
+         test = ~self.dea2
0 
+         self.assertEqual(test.reachable(0,1),"a")
+         self.assertEqual(test.reachable(1,4),"a")
+         self.assertEqual(test.reachable(2,1),"ab")
+         self.assertEqual(test.reachable(2,3),"ab")
+         self.assertEqual(test.reachable(3,4),"b")
+         self.assertEqual(test.reachable(0,3),"a")
+         self.assertEqual(test.reachable(0,1),"a")
+         self.assertEqual(test.reachable(2,0),"a")
0 
0 
+     def test_call1(self):
+         Q,A,d,s,F = self.dea1
0 
+         for a in A:
+             for q in Q:
+                 p =  d[q , a]
+                 self.assertEqual(p , self.dea1(q , a))
0 
+     def test_invert(self):
+         idea =  ~ self.dea1
0 
+     def test_contains(self):
+         self.assertTrue( 0 in self.dea1)
+         self.assertTrue( 1 in self.dea1)
+         self.assertTrue( 2 in self.dea1)
+         self.assertFalse( 3 in self.dea1)
0 
+         self.assertTrue( (0,"a",2)   in self.dea1)
+         self.assertTrue( (0,"b",1)   in self.dea1)
+         self.assertTrue( (1,"a",2)   in self.dea1)
0 
+         self.assertFalse( (2,"a",2)   in self.dea1)
0 
0 
+     def test_tarjan(self):
+         Z1 = self.dea1.tarjan()
+         self.assertEqual(Z1,[(0,1,2)])
+         self.assertEqual(tarjan2dict(Z1),
+                          {0: {0, 1, 2}, 1: {0, 1, 2}, 2: {0, 1, 2}})
0 
+         Z2 = self.dea2.tarjan()
0         #self.assertEqual(Z2,[(0,)]
+         self.assertEqual(tarjan2dict(Z2),
+                          {0: {0, 1, 3, 4}, 1: {0, 1, 3, 4}, 2: {2}, 3: {0, 1, 3, 4}, 4: {0, 1, 3, 4}})
0 
+         Z3 = DEA("dea_test_b12_b.xml").tarjan()
+         self.assertEqual(tarjan2dict(Z3),
+                          {0: {0, 1, 4}, 1: {0, 1, 4}, 2: {2}, 3: {3}, 4: {0, 1, 4}, 5: {5}})
0 
0 
+     def test_sCC(self):
+         Z,f,g = self.dea1.sCC()
+         for comp1 in Z.values(): #fully mashed dea
+             for comp2  in Z.values():
+                 self.assertEqual(comp1,comp2)
+         self.assertEqual({0,1,2}, Z[0])
0 
+         Z,f,g = self.dea2.sCC()
+         for comp1 in Z.values(): #fully mashed dea
+             for comp2  in comp1:
+                 self.assertEqual(Z[comp2],comp1)
+         for q in self.dea2.Q:
+             self.assertTrue(Z[q])
+         self.assertEqual({0,1,3,4}, Z[0])
+         self.assertEqual({2}, Z[2])
0 
0 
+     def test_inEquality(self):
+         Z,w=self.dea1.inEquality()
+         self.assertEqual(Z,{(1,0), (1,2)})
+         self.assertEqual(self.dea2.inEquality(),
+                         ({(3, 0), (3, 2), (3, 1), (3, 4)},
+                          {(3, 0): '', (3, 2): '', (3, 1): '', (3, 4): ''}))
0 
0 
+     def test_trivialComponents(self):
+         T = self.dea1.trivialComponents()
+         self.assertEqual(T,set())
+         T = self.dea2.trivialComponents()
+         self.assertEqual(T,set())
+         T = self.deaBig.trivialComponents()
+         self.assertEqual(T,set())
0 
+ if __name__ == '__main__':
+     suite = unittest.TestLoader().loadTestsFromTestCase(TestDEA)
+     unittest.TextTestRunner(verbosity=2).run(suite)
